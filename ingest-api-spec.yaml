openapi: 3.0.0
info:
  description: |
    A RESTful web service exposing calls needed for the SenNet Data Sharing Portal.
  version: 1.7.6
  title: SenNet Ingest API
  contact:
    name: SenNet Help Desk
    email: help@sennetconsortium.org
  license:
    name: MIT License
    url: 'https://github.com/sennetconsortium/ingest-api/blob/main/LICENSE'
servers:
  - url: 'https://ingest.api.sennetconsortium.org'
security:
  - BearerAuth: []
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      description: Globus Bearer token to authorize requests

  schemas:
    file_info:
      type: object
      required:
        - filename
        - file_uuid
      properties:
        filename:
          type: string
        file_uuid:
          type: string

    file_uuid:
      type: string

    entity_uuid:
      type: string
      pattern: '^[a-f0-9]{32}$'

    JobCreated:
      type: object
      properties:
        job_id:
          type: string
          format: uuid
        status:
          type: string

    Referrer:
      type: object
      description: The type of job and the URL path in the portal
      properties:
        type:
          type: string
          description: The type of job
        path:
          type: string
          description: The URL path in the portal

    Sources:
      type: object
      properties:
        "1":
          $ref: '#/components/schemas/Source'
        "2":
          $ref: '#/components/schemas/Source'
        "3":
          $ref: '#/components/schemas/Source'

    Source:
      type: object
      properties:
        created_timestamp:
          type: integer
          readOnly: true
          description: The timestamp of when the node was created. The format is an integer representing milliseconds since midnight Jan 1, 1970
        created_by_user_displayname:
          type: string
          readOnly: true
          description: The name of the person or process authenticated when creating the object
        created_by_user_email:
          type: string
          readOnly: true
          description: The email address of the person or process authenticated when creating the object.
        created_by_user_sub:
          type: string
          readOnly: true
          description: The subject id as provided by the authorization mechanism for the person or process authenticated when creating the object.
        uuid:
          type: string
          readOnly: true
          description: The SenNet unique identifier, intended for internal software use only. This is a 32 digit hexadecimal UUID e.g. 461bbfdc353a2673e381f632510b0f17
        sennet_id:
          type: string
          readOnly: true
          description: A SenNet Consortium wide unique identifier randomly generated in the format SNT###.ABCD.### for every Entity.
        last_modified_timestamp:
          type: integer
          readOnly: true
          description: The timestamp of when the object was last modified. The format is an integer representing milliseconds since midnight, Jan 1, 1970
        last_modified_user_sub:
          type: string
          readOnly: true
          description: The subject id of the user who last modified the Entity as provided by the authorization mechanism for the person or process authenticated when the object was modified.
        last_modified_user_email:
          type: string
          readOnly: true
          description: The email address of the person or process which authenticated when the object was last modified.
        last_modified_user_displayname:
          type: string
          readOnly: true
          description: The name of the person or process which authenticated when the object was last modified.
        entity_type:
          type: string
          readOnly: true
          description: 'Source'
        description:
          type: string
          description: Free text description of the source
        data_access_level:
          type: string
          readOnly: true
          enum:
            - consortium
            - public
          description: 'One of the values: public, consortium'
        lab_source_id:
          type: string
          description: A lab specific identifier for the source.
        group_uuid:
          type: string
          description: The UUID of globus group which the user who created this Entity is a member of. This is required on Create/POST if the user creating the Source is a member of more than one write group. This property cannot be set via PUT (only on Create/POST).
        group_name:
          readOnly: true
          type: string
          description: The displayname of globus group which the user who created this Entity is a member of
        source_type:
          type: string
          enum:
            - Human
            - Human Organoid
            - Mouse
            - Mouse Organoid
          description: "A high level description of where this source originates from. Valid values found in: [source types](https://ontology.api.hubmapconsortium.org/valueset?parent_sab=SENNET&parent_code=C050020&child_sabs=SENNET)"

    Samples:
      type: object
      properties:
        "1":
          $ref: '#/components/schemas/Sample'
        "2":
          $ref: '#/components/schemas/Sample'
        "3":
          $ref: '#/components/schemas/Sample'

    Sample:
      type: object
      properties:
        created_timestamp:
          type: integer
          readOnly: true
          description: The timestamp of when the node was created. The format is an integer representing milliseconds since midnight Jan 1, 1970
        created_by_user_displayname:
          type: string
          readOnly: true
          description: The name of the person or process authenticated when creating the object
        created_by_user_email:
          type: string
          readOnly: true
          description: The email address of the person or process authenticated when creating the object.
        created_by_user_sub:
          type: string
          readOnly: true
          description: The subject id as provided by the authorization mechanism for the person or process authenticated when creating the object.
        uuid:
          type: string
          readOnly: true
          description: The SenNet unique identifier, intended for internal software use only. This is a 32 digit hexadecimal UUID e.g. 461bbfdc353a2673e381f632510b0f17
        sennet_id:
          type: string
          readOnly: true
          description: A SenNet Consortium wide unique identifier randomly generated in the format SNT###.ABCD.### for every Entity.
        last_modified_timestamp:
          type: integer
          readOnly: true
          description: The timestamp of when the object was last modified. The format is an integer representing milliseconds since midnight, Jan 1, 1970
        last_modified_user_sub:
          type: string
          readOnly: true
          description: The subject id of the user who last modified the Entity as provided by the authorization mechanism for the person or process authenticated when the object was modified.
        last_modified_user_email:
          type: string
          readOnly: true
          description: The email address of the person or process which authenticated when the object was last modified.
        last_modified_user_displayname:
          type: string
          readOnly: true
          description: The name of the person or process which authenticated when the object was last modified.
        entity_type:
          type: string
          readOnly: true
          description: 'Sample'
        description:
          type: string
          description: Free text description of the source
        data_access_level:
          type: string
          readOnly: true
          enum:
            - consortium
            - public
          description: 'One of the values: public, consortium'
        lab_source_id:
          type: string
          description: A lab specific identifier for the source.
        group_uuid:
          type: string
          description: The uuid of globus group which the user who created this Entity is a member of. This is required on Create/POST if the user creating the Source is a member of more than one write group. This property cannot be set via PUT (only on Create/POST).
        group_name:
          readOnly: true
          type: string
          description: The displayname of globus group which the user who created this Entity is a member of
        sample_category:
          type: string
          enum:
            - Block
            - Organ
            - Section
            - Suspension
          description: "The category of the sample. Valid values found in: [sample categories](https://ontology.api.hubmapconsortium.org/valueset?parent_sab=SENNET&parent_code=C020076&child_sabs=SENNET)"
        organ:
          type: string
          description: "Organ code specifier, only set if `sample_category` is organ. Valid values found in: [organ types](https://ontology.api.hubmapconsortium.org/organs?application_context=sennet) under 'organ_uberon'"

    Datasets:
      type: object
      properties:
        "1":
          $ref: '#/components/schemas/Dataset'
        "2":
          $ref: '#/components/schemas/Dataset'
        "3":
          $ref: '#/components/schemas/Dataset'

    Dataset:
      type: object
      properties:
        created_timestamp:
          type: integer
          readOnly: true
          description: The timestamp of when the node was created. The format is an integer representing milliseconds since midnight Jan 1, 1970
        created_by_user_displayname:
          type: string
          readOnly: true
          description: The name of the person or process authenticated when creating the object
        created_by_user_email:
          type: string
          readOnly: true
          description: The email address of the person or process authenticated when creating the object.
        created_by_user_sub:
          type: string
          readOnly: true
          description: The subject id as provided by the authorization mechanism for the person or process authenticated when creating the object.
        uuid:
          type: string
          readOnly: true
          description: The SenNet unique identifier, intended for internal software use only. This is a 32 digit hexadecimal UUID e.g. 461bbfdc353a2673e381f632510b0f17
        sennet_id:
          type: string
          readOnly: true
          description: A SenNet Consortium wide unique identifier randomly generated in the format SNT###.ABCD.### for every Entity.
        last_modified_timestamp:
          type: integer
          readOnly: true
          description: The timestamp of when the object was last modified. The format is an integer representing milliseconds since midnight, Jan 1, 1970
        last_modified_user_sub:
          type: string
          readOnly: true
          description: The subject id of the user who last modified the Entity as provided by the authorization mechanism for the person or process authenticated when the object was modified.
        last_modified_user_email:
          type: string
          readOnly: true
          description: The email address of the person or process which authenticated when the object was last modified.
        last_modified_user_displayname:
          type: string
          readOnly: true
          description: The name of the person or process which authenticated when the object was last modified.
        entity_type:
          type: string
          readOnly: true
          description: 'Dataset'
        description:
          type: string
          description: Free text description of the dataset
        data_access_level:
          type: string
          readOnly: true
          enum:
            - public
            - consortium
          description: 'One of the values: public, consortium.'
        contains_human_genetic_sequences:
          type: boolean
          description: True if the data contains any human genetic sequence information. Can only be set at CREATE/POST time
        status:
          type: string
          enum:
            - New
            - Processing
            - QA
            - Published
            - Error
            - Hold
            - Invalid
          description: 'One of: New|Processing|QA|Published|Error|Hold|Invalid'
        dataset_type:
          type: string
          description: "The data or assay type contained in this dataset. Must be one of the values found in: [dataset types](https://ontology-api.dev.hubmapconsortium.org/valueset?parent_sab=SENNET&parent_code=C003041&child_sabs=SENNET)."
        local_directory_rel_path:
          type: string
          readOnly: true
          description: The path on the local HIVE file system, relative to the base data directory, where the data is stored.
        group_uuid:
          type: string
          description: The UUID of globus group which the user who created this Entity is a member of. This is required on Create/POST if the user creating the Source is a member of more than one write group.  This property cannot be set via PUT (only on Create/POST).
        group_name:
          type: string
          readOnly: true
          description: The displayname of globus group which the user who created this Entity is a member of

    AssayTypeReturnDict:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        primary:
          type: boolean
        vitessce-hints:
          type: array
          items:
            type: string

    Metadata:
      type: object

paths:
  /datasets:
    post:
      tags:
        - datasets
      summary: Creates a new SenNet Dataset.
      operationId: addDataset
      responses:
        "201":
          description: Successful created
        "400":
          description: Missing data that is required to create a new Dataset or a system error occurred
        "401":
          description: User is not authorized to create datasets or user's group information cannot be determined
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Dataset"
          application/xml:
            schema:
              $ref: "#/components/schemas/Dataset"
        description: Dataset object that needs to be created
        required: true

  /file-upload:
    post:
      tags:
        - files
      summary: "Upload a file to temporarily stage. On success the file will be staged and a temporary ID will be returned to reference the staged file. The temporary ID can be used in the `/file-commit` endpoint for Sources and Samples to commit the file permanantly and associate it with an Entity." 
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: The file was successfully uploaded and staged, the temporary file ID is returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  temp_file_id:
                    type: string
        "400":
          description: Missing file
        "401":
          description: The user's token has expired or the user did not supply a valid token
        "403":
          description: The user is not authorized to upload the file.
        "500":
          description: Internal error

  /file-commit:
    post:
      tags:
        - files
      summary: "File commit triggered by the Entity API trigger method for Source/Sample/Dataset. Source: image files. Sample: image files and metadata files. Dataset: only the one thumbnail file. This call also creates the symbolic link from the file UUID directory under the uploads assets directory, so the uploaded files can be exposed via Globus's file assets service." 
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                temp_file_id:
                  type: string
                entity_uuid:
                  type: string
                user_token:
                  type: string
      responses:
        "200":
          description: The file was successfully commited, the file UUID is returned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  filename:
                    type: string
                  file_uuid:
                    type: string
        "400":
          description: Missing JSON input
        "401":
          description: The user's token has expired or the user did not supply a valid token
        "500":
          description: Internal error

  /file-remove:
    post:
      tags:
        - files
      summary: "File removal triggered by Entity API trigger method for Source and Sample during Entity update. Source/Sample/Dataset. Source: image files. Sample: image files and metadata files. Dataset: only the one thumbnail file." 
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                entity_uuid:
                  type: string
                file_uuids:
                  type: array
                  items:
                    $ref: '#/components/schemas/file_uuid'
                files_info_list:
                  type: array
                  items:
                    $ref: '#/components/schemas/file_info'

      responses:
        "200":
          description: The file was successfully deleted.
        "400":
          description: Missing JSON input
        "401":
          description: The user's token has expired or the user did not supply a valid token
        "500":
          description: Internal error

  /metadata/validate:
    post:
      tags:
        - metadata
      summary: Validate an uploaded metadata TSV file using the backend Job Queue.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                entity_type:
                  type: string
                  enum:
                    - Source
                    - Sample
                    - Dataset
                  description: The type of Entity the metadata is for.
                sub_type:
                  type: string
                  enum:
                    - Block
                    - Organ
                    - Section
                    - Suspension
                  description: The sub type of the Sample.
                validate_uuids:
                  type: integer
                  description: Whether to validate UUIDs in the metadata, 0 or 1.
                referrer:
                  type: string
                  description: 'The type of job and the URL path in the portal. Json formatted string {"type": "job_type", "path": "portal/url/path"}.'
                metadata:
                  type: string
                  format: binary
                  description: The metadata TSV file.
      responses:
        "202":
          description: The validation job was added to the queue and will be processed.
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/JobCreated"
        "400":
          description: One or more required fields are missing or invalid.
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
        "401":
          description: User's token is not valid or missing.
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
        "500":
          description: An unexpected internal error occured.
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string

  /metadata/register:
    post:
      tags:
        - metadata
      summary: Register metadata from a previously completed metadata validation job.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                job_id:
                  type: string
                  description: The job_id of the completed validation job.
                referrer:
                  $ref: "#/components/schemas/Referrer"

      responses:
        "202":
          description: The registration job was added to the queue and will be processed.
          content:
            application/json:
              schema:
                  $ref: "#/components/schemas/JobCreated"
        "400":
          description: One or more required fields are missing or invalid.
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
        "401":
          description: User's token is not valid or missing.
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
        "500":
          description: An unexpected internal error occured.
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string

  /metadata/data-provider-groups:
    get:
      tags:
        - metadata
      summary: Returns an array of nested objects containing information pertaining to all Data Provider groups.
      responses:
        "200":
          description: The JSON containing an array of data provider group information
        "401":
          description: User's token is not valid
        "500":
          description: An unexpected error occurred

  /metadata/provenance-metadata/{identifier}:
    get:
      tags:
        - metadata
      summary: Returns the full provenance metadata for the provided dataset and all of its ancestors.
      responses:
        "200":
          description: The JSON containing full provenance metadata
        "401":
          description: User's token is not valid
        "500":
          description: An unexpected error occurred

  /sources/bulk/validate:
    post:
      tags:
        - sources
      summary: >
        Validate an uploaded TSV file containing multiple Source records using the backend Job Queue.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The TSV file containing the Source records
                group_uuid:
                  type: string
                  description: The UUID of the group the Sources should belong to
                referrer:
                  type: string
                  description: 'The type of job and the URL path in the portal. Json formatted string {"type": "job_type", "path": "portal/url/path"}.'
      responses:
        "202":
          description: File uploaded and validation job successfully created in the backend Job Queue
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobCreated"
        "400":
          description: One or more required fields are missing or invalid.
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
        "401":
          description: The user's token has expired or the user did not have authorization
        "500":
          description: Internal error

  /sources/bulk/register:
    post:
      tags:
        - sources
      summary: Register the previously validated Source records using the backend Job Queue.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                job_id:
                  type: string
                  description: The job ID of the previously created validation job
                referrer:
                  $ref: "#/components/schemas/Referrer"
      responses:
        "202":
          description: Registration job successfully created in the backend Job Queue
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobCreated"
        "400":
          description: One or more required fields are missing or invalid.
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
        "401":
          description: The user's token has expired or the user did not have authorization
        "500":
          description: Internal error

  /samples/bulk/validate:
    post:
      tags:
        - samples
      summary: >
        Validate an uploaded TSV file containing multiple Sample records using the backend Job Queue.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The TSV file containing the Sample records
                group_uuid:
                  type: string
                  description: The UUID of the group the Samples should belong to
                referrer:
                  type: string
                  description: 'The type of job and the URL path in the portal. Json formatted string {"type": "job_type", "path": "portal/url/path"}.'
      responses:
        "202":
          description: File uploaded and validation job successfully created in the backend Job Queue
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobCreated"
        "400":
          description: One or more required fields are missing or invalid.
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
        "401":
          description: The user's token has expired or the user did not have authorization
        "500":
          description: Internal error

  /samples/bulk/register:
    post:
      tags:
        - samples
      summary: Register the previously validated Sample records using the backend Job Queue.
      requestBody:
        content:
          application/json:
            schema:
              properties:
                job_id:
                  type: string
                  description: The job ID of the previously created validation job
                referrer:
                  $ref: "#/components/schemas/Referrer"
      responses:
        "202":
          description: Registration job successfully created in the backend Job Queue
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobCreated"
        "400":
          description: One or more required fields are missing or invalid.
          content:
            application/json:
              schema:
                properties:
                  error:
                    type: string
        "401":
          description: The user's token has expired or the user did not have authorization
        "500":
          description: Internal error

  /datasets/bulk/submit:
    put:
      tags:
        - datasets
      summary: "Submit a list of Datasets for processing. This requires SenNet Data-Admin privileges."
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/entity_uuid'
      responses:
        "202":
          description: The Datasets were successfully submitted for processing
        "401":
          description: The user did not supply a valid token
        "403":
          description: The user does not have SenNet Data-Admin privileges
        "404":
          description: One or more supplied datasets do not exist
        "500":
          description: An unexpected error occured

  /datasets/sankey_data:
    get:
      tags:
        - datasets
      summary: Retrieves the information needed to generate the sankey on software-docs as a json.
      responses:
        '200':
          description: dataset_group_name, organ_type, dataset_data_types, and dataset_status for every primary dataset
          content:
            application/json:
              schema:
                type: object
                properties:
                  dataset_group_name:
                    type: string
                    description: The display name of the Globus group which the user who created this entity is a member of
                  dataset_source_type:
                    type: string
                    description: The source type of the source associated with this dataset in the provenance chain
                  organ_type:
                    type: array
                    description: The organ type of the organ(s) associated with this dataset in the provenance chain
                  dataset_type_hierarchy:
                    type: string
                    description: The top level modality of the dataset type
                  dataset_type_description:
                    type: string
                    description: The description of the dataset type after being evaluated by the rule chain
                  dataset_status:
                    type: string
                    description: The status of the dataset New, QA, Published, etc ...
        '500':
          description: Internal error

  /uploads/{identifier}/validate:
    put:
      tags:
        - uploads
      summary: Validate an upload.
      operationId: validateUpload
      parameters:
        - name: identifier
          in: path
          description: The unique identifier of Upload. This identifier needs to be a valid SenNet ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
        "400":
          description: There was a system error or an error in the data submitted
        "401":
          description: User's token is not valid
        "500":
          description: An unexpected error occured

  /uploads/{identifier}/reorganize:
    put:
      tags:
        - uploads
      summary: Reorganize an upload. Creates Datasets from the Upload
      operationId: reorganizeUpload
      parameters:
        - name: identifier
          in: path
          description: The unique identifier of Upload. This identifier needs to be a valid SenNet ID.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
        "400":
          description: There was a system error or an error in the data submitted
        "401":
          description: User's token is not valid
        "500":
          description: An unexpected error occured

  /vitessce/{identifier}:
    get:
      tags:
        - vitessce
      summary: Return a Vitessce configuration for a given Dataset UUID
      parameters:
        - name: identifier
          in: path
          description: The UUID of the Dataset.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: The [Vitessce JSON configuration](http://vitessce.io/docs/view-config-json) for the given Dataset
        "400":
          description: Identifier is not a valid UUID
        "401":
          description: User's token is not valid
        "500":
          description: An unexpected error occurred


  '/assaytype/{ds_uuid}':
    get:
      tags:
        - assaytype
      summary: Runs through the assay classifier with the provided Dataset to determine an assaytype
      operationId: getAssayType
      parameters:
        - name: ds_uuid
          in: path
          description: The UUID of a Dataset
          required: true
          schema:
             type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssayTypeReturnDict'
        "400":
          description: The user sent a bad parameter (e.g. a nonexistent group name) or there was a system error
        "401":
          description: User's token is not valid

  '/assaytype/metadata/{ds_uuid}':
    get:
      tags:
        - assaytype
      summary: Get the metadata for a specific Dataset
      operationId: getMetadata
      parameters:
        - name: ds_uuid
          in: path
          description: The UUID of a Dataset
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metadata'
        "400":
          description: The user sent a bad parameter (e.g. a nonexistent group name) or there was a system error
        "401":
          description: User's token is not valid

  '/assaytype':
    post:
      tags:
        - assaytype
      summary: Runs through the assay classifier with the provided metadata to determine an assaytype
      operationId: getAssaytypeFromMetadata
      requestBody:
        content:
           application/json:
             schema:
               $ref: '#/components/schemas/Metadata'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssayTypeReturnDict'
        "400":
          description: The user sent a bad parameter (e.g. a nonexistent group name) or there was a system error
        "401":
          description: User's token is not valid